import { Field, Experimental, verify, Struct, Proof } from 'o1js';

export const CardDeck = Experimental.ZkProgram({

	// Name and state of deck 
	name: "Card-Deck",
	publicInput: DeckState,
	publicOuput: Field,

	methods: {
		// Create base 
		create: {
			privateInputs: [],

			async method(state: DeckState) {

				DeckState.assertInitialState(state);
			},
		},

		// Add card to deck specifying suite and rank 
		add: {
			privateInputs: [SelfProof<DeckState, void>,
							Field, Field, Field],

			async method(newState: DeckState, 
				earlierProof: SelfProof<DeckState, void>,
				qty: Field, suite: Field, rank: Field) {

				// Verify previous card proof 
				earlierProof.verify();
				// Check card inputs against claimed state 
				const computedState = DeckState.add(
								earlierProof.publicInput,
								qty, suite, rank);
				DeckState.assertEquals(computedState, newState);
			},
		},
	},
});